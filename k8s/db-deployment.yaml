apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  name: db
spec:
  replicas: 1
  selector:
    matchLabels:
      io.service: db
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.network/djangonetwork: "true"
        io.service: db
    spec:
      containers:
        - args:
            - mysqld
            - --character-set-server=utf8mb4
            - --collation-server=utf8mb4_unicode_ci
          env:
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  key: MYSQL_DATABASE
                  name: env
            - name: MYSQL_DATABASE_HOST
              valueFrom:
                configMapKeyRef:
                  key: MYSQL_DATABASE_HOST
                  name: env
            - name: MYSQL_DATABASE_PORT
              valueFrom:
                configMapKeyRef:
                  key: MYSQL_DATABASE_PORT
                  name: env
            - name: MYSQL_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: MYSQL_PASSWORD
                  name: env
            - name: MYSQL_ROOT_HOST
              valueFrom:
                configMapKeyRef:
                  key: MYSQL_ROOT_HOST
                  name: env
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: MYSQL_ROOT_PASSWORD
                  name: env
            - name: MYSQL_USER
              valueFrom:
                configMapKeyRef:
                  key: MYSQL_USER
                  name: env
          image: mysql:8.0
          livenessProbe:
            exec:
              command:
                - mysqladmin
                - ping
                - -h
                - localhost
                - -uroot
                - -ppass
            failureThreshold: 20
            periodSeconds: 5
            timeoutSeconds: 5
          name: db
          ports:
            - containerPort: 3306
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: db-claim0
      restartPolicy: Always
      volumes:
        - name: db-claim0
          persistentVolumeClaim:
            claimName: db-claim0
status: {}
