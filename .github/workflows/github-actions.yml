name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Change this to your main branch name

jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      MYSQL_DATABASE: ${{ vars.MYSQL_DATABASE }}
      MYSQL_DATABASE_HOST: ${{ vars.MYSQL_DATABASE_HOST }}
      MYSQL_DATABASE_PORT: ${{ vars.MYSQL_DATABASE_PORT }}
      MYSQL_USER: ${{ vars.TEST_MYSQL_USER }}
      MYSQL_PASSWORD: ${{ vars.TEST_MYSQL_PASSWORD }}
      MYSQL_ROOT_PASSWORD: ${{ vars.TEST_MYSQL_ROOT_PASSWORD }}
    services:
      mysql:
        # https://hub.docker.com/_/mysql
        image: mysql:8.0
        env:
          MYSQL_USER: ${{ vars.TEST_MYSQL_USER }}
          MYSQL_PASSWORD: ${{ vars.TEST_MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ vars.MYSQL_DATABASE }}
          MYSQL_DATABASE_PORT: ${{ vars.MYSQL_DATABASE_PORT }}
          MYSQL_ROOT_PASSWORD: ${{ vars.TEST_MYSQL_ROOT_PASSWORD }}
        ports: ['3306:3306']
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10' 
      - name: Add hosts to /etc/hosts
        run: |
            sudo echo "127.0.0.1       ${{ vars.MYSQL_DATABASE_HOST }}" | sudo tee -a /etc/hosts
      - name: apt update
        run: sudo apt-get update
      - name: Install mysql server
        run: sudo apt-get install -y mysql-server 
      - name: Update setup mysql sql file
        run: |
          sed 's/mysqldb/${{ vars.MYSQL_DATABASE }}/' setup_mysql_testing.sql > setup_mysql2.sql
          sed 's/mysql-user/${{ vars.TEST_MYSQL_USER }}/' setup_mysql2.sql > setup_mysql.sql
      - name: Configure mysql database
        run: mysql -h 127.0.0.1 -uroot -p${{ vars.TEST_MYSQL_ROOT_PASSWORD }} mysqldb < setup_mysql.sql
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Migrate database
        run: |
          python3 primaProject/manage.py makemigrations
          python3 primaProject/manage.py migrate
      - name: Test code
        run: python3 primaProject/manage.py test users      
        
  dockerize:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build image
        run: docker build . -t ${{ vars.DOCKER_IMAGE_NAME }}
      - name: Save image
        run: docker save -o ./dockerimage.tar ${{ vars.DOCKER_IMAGE_NAME }}
      - uses: actions/upload-artifact@v2
        with:
          name: dockerimage
          path: ./dockerimage.tar 
      
    
  deployment:
    runs-on: ubuntu-20.04
    needs: dockerize
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: medyagh/setup-minikube@latest
        with:
          cache: false
      - name: Start Minikube
        run: minikube start
      - uses: actions/download-artifact@v2
        with:
          name: dockerimage
          path: .
      - name: Load Docker image into Minikube
        run: eval $(minikube -p minikube docker-env) && docker load < ./dockerimage.tar 
      - name: Set env values
        run: |
          sed "s/replicas: [0-9]*/replicas: ${{ vars.REPLICA_NUMBER }}/" k8s/web-deployment.yaml > k8s/web-deployment-sed.yaml
          sed "s/MYSQL_DATABASE: \w*/MYSQL_DATABASE: ${{ vars.MYSQL_DATABASE }}/" k8s/env-configmap.yaml > k8s/env-configmap-sed.yaml
          sed "s/MYSQL_DATABASE_HOST: \w*/MYSQL_DATABASE_HOST: ${{ vars.MYSQL_DATABASE_HOST }}/" k8s/env-configmap-sed.yaml > k8s/env-configmap-sed1.yaml
          sed "s/MYSQL_DATABASE_PORT: \w*/MYSQL_DATABASE_PORT: "${{ vars.MYSQL_DATABASE_PORT }}"/" k8s/env-configmap-sed1.yaml > k8s/env-configmap-sed2.yaml
          echo "${{ secrets.MINIKUBE_SECRETS }}" > k8s/env-secrets.yaml
      - run: cat k8s/web-deployment-sed.yaml
      - name: test pods
        run: kubectl get endpoints
      - name: Apply Kubernetes manifests
        run: |
          kubectl apply --force -f k8s/env-configmap-sed2.yaml
          kubectl apply --force -f k8s/env-secrets.yaml
          kubectl apply --force -f k8s/db-claim0-persistentvolumeclaim.yaml
          kubectl apply --force -f k8s/djangonetwork-networkpolicy.yaml
          kubectl apply --force -f k8s/db-deployment.yaml
          kubectl apply --force -f k8s/db-service.yaml
          kubectl apply --force -f k8s/web-deployment-sed.yaml
          kubectl apply --force -f k8s/web-service.yaml
      - name: Wait for deployment to be ready
        run: |
          kubectl rollout status deployment/db -n default --timeout=300s
          kubectl rollout status deployment/web -n default --timeout=300s
      - name: Get api url
        run: minikube service web --url
      - name: Verify Deployment
        run: kubectl get deployments && kubectl get services
      - name: Contact django app to test post endpoint is working
        run: |
          minikube service example --url
          echo "------------------opening the service------------------"
          echo "HTTP_CODE_POST=$(curl -d "first_name=John&last_name=Doe&password=securepassword&email=use1@example.com" -X POST "$(minikube service web --url)/api/users")" >> $GITHUB_OUTPUT
      - if: ${{ steps.version.outputs.HTTP_CODE_POST == 000 || fromJSON(steps.version.outputs.HTTP_CODE_POST) >= 400 }}
        name: Error code from get
        run: exit 1
      - name: Contact django app to test get endpoint is working
        run: |
          minikube service example --url
          echo "------------------opening the service------------------"echo "HTTP_CODE_GET=$(curl --write-out '%{http_code}' --silent "$(minikube service web --url)/api/users/1")" >> $GITHUB_OUTPUT
      - if: ${{ steps.version.outputs.HTTP_CODE_GET == 000 || fromJSON(steps.version.outputs.HTTP_CODE_GET) >= 400 }}
        name: Error code from get
        run: exit 1
      
