name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Change this to your main branch name

jobs:
  build:
    container: node:18
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - uses: mirromutth/mysql-action@v1.1
        with:
          host port: 3306 # Optional, default value is 3306. The port of host
          container port: 3306 # Optional, default value is 3306. The port of container
          character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
          collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
          mysql version: '8.0' # Optional, default value is "latest". The version of the MySQL
          mysql database: 'mysqldb' # Optional, default value is "test". The specified database which will be create
          mysql user: 'mysql-user' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
          mysql password: 'mysql-password' # Required if "mysql user" exists. The password for the "mysql user"
      - name: Add hosts to /etc/hosts
        run: |
            echo "127.0.0.1       db" | sudo tee -a /etc/hosts
      - name: Update mysql client
        run: |
            sudo apt-get update
            sudo apt-get install -y  mysql-client 
      - name: Update mysql client
        run: |
            sudo apt-get update
            sudo apt-get install -y  mysql-client 
      - name: Configure mysql database
        run: cat setup_mysql.sql | sudo mysql -u root --password=ANSKk08aPEDbFjDO
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Migrate database
        run: |
          python3 primaProject/manage.py makemigrations
          python3 primaProject/manage.py migrate
      - name: Test code
        run: python3 primaProject/manage.py test

  minikube:
    runs-on: self-hosted
    needs: build
    name: Install minikube
    steps:
      - uses: actions/checkout@v2
      - name: Setup
        uses: medyagh/setup-minikube@latest
        
  dockerize:
    runs-on: self-hosted
    needs: minikube
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build image
        run: |
          export SHELL=/bin/bash
          eval $(minikube -p minikube docker-env)
          docker build . -t imageName
          echo -n "verifying images:"
          docker images

    
  deployment:
    runs-on: self-hosted
    needs: dockerize
    steps:
      - name: Start Minikube
        run: minikube start
      - name: Load Docker image into Minikube
        run: eval $(minikube -p minikube docker-env) && docker load -i my-django-app_latest.tar
      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/env-configmap.yaml
          kubectl apply -f k8s/db-claim0-persistentvolumeclaim.yaml
          kubectl apply -f k8s/djangonetwork-networkpolicy.yaml
          kubectl apply -f k8s/db-deployment.yaml
          kubectl apply -f k8s/db-service.yaml
          kubectl apply -f k8s/web-deployment.yaml
          kubectl apply -f k8s/web-service.yaml
      - name: Wait for deployment to be ready
        run: kubectl rollout status deployment/web -n default --timeout=300s
      - name: Get api url
        run: minikube service web --url
      - name: Verify Deployment
        run: kubectl get deployments && kubectl get services
      
